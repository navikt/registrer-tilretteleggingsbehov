{"version":3,"sources":["visning/Visning.module.css","mock/testdata.ts","registrering/kategori-spørsmål/KategoriSpørsmål.module.css","endring/slett-modal/SlettModal.module.css","advarsel/Advarsel.module.css","gi-tilbakemelding/GiTilbakemelding.module.css","introduksjon/Introduksjon.module.css","utvikling/Utvikling.module.css","api/Behov.ts","tilbakeknapp/Tilbakeknapp.module.css","mock/mock.ts","api/Rest.ts","utils/datoUtils.ts","api/api.ts","api/arbeidssøkerApi.ts","utils/navigering.ts","api/tilretteleggingsbehov.ts","registrering/kategori-spørsmål/KategoriSpørsmål.tsx","endring/slett-modal/SlettModal.tsx","tilbakeknapp/Tilbakeknapp.tsx","gi-tilbakemelding/GiTilbakemelding.tsx","endring/Endring.tsx","introduksjon/Introduksjon.tsx","registrering/Registrering.tsx","visning/Behovgruppe.tsx","advarsel/Advarsel.tsx","App.tsx","visning/Visning.tsx","utvikling/Utvikling.tsx","index.tsx","registrering/Registrering.module.css"],"names":["module","exports","etFnr","enKandidat","aktørId","fnr","sistEndretAvVeileder","sistEndretAv","arbeidstid","Arbeidstid","IkkeHeleDager","Fleksibel","fysisk","Fysisk","Ergonomi","Arbeidsstilling","UniversellUtforming","arbeidshverdagen","Arbeidshverdagen","PersonligBistand","utfordringerMedNorsk","enArbeidssoker","harJobbprofil","harCv","Kategori","UtfordringerMedNorsk","basePath","fetchMock","get","post","status","body","put","Date","toISOString","delete","delay","Status","Språk","ikkeLastet","IkkeLastet","lasterInn","LasterInn","ukjentFeil","UkjentFeil","hentKandidat","a","fetch","medCookies","respons","ok","Feil","statusKode","json","kandidat","Suksess","data","opprettKandidat","options","opprettetKandidat","endreKandidat","endretKandidat","slettKandidat","method","Slettet","sendTilbakemelding","tilbakemelding","behov","hentSamtykke","IkkeFunnet","JSON","stringify","headers","credentials","hentArbeidssøker","aktørid","visRegistreringEvent","visDetaljerEvent","navigerTilRegistreringsside","dispatchEvent","Event","navigerTilVisningsside","tilretteleggingsbehov","beskrivelse","BorteFasteDagerEllerTider","GradvisØkning","hjelpetekst","TungeLøft","Opplæring","Arbeidsoppgaver","TettOppfølging","StilleOgRoligMiljø","Snakke","Skrive","Lese","hentTeksterForValgteBehov","kategori","filter","b","includes","KategoriSpørsmål","tittel","valgteBehov","onChange","alternativer","hentTekster","toggleAlternativ","className","css","kategoriSpørsmål","Heading","level","size","BodyLong","kategorihjelpetekst","CheckboxGroup","legend","map","alternativ","checkbox","Checkbox","checked","aria-describedby","Detail","id","SlettModal","erÅpen","lukk","useState","setRespons","useEffect","slettKandidatOgLukk","responsFraSletting","Modal","closeButton","open","onClose","slettModal","Content","tekst","knapper","Button","variant","onClick","loading","Tilbakeknapp","tilbakeknapp","Back","fr","GiTilbakemelding","setTilbakemelding","setStatus","feilmelding","setFeilmelding","harTrykketSend","setHarTrykketSend","validerTilbakemelding","length","validerOgSendForslag","event","preventDefault","visTilbakemeldingsboks","Accordion","giTilbakemelding","Item","Header","onSubmit","BodyShort","Textarea","label","error","value","input","target","Alert","Endring","setArbeidstid","setFysisk","setArbeidhverdagen","setUtfordringerMedNorsk","skalViseIngenValgteBehovFeil","setSkalViseIngenValgteBehovFeil","visSlettModal","toggleSlettModal","onEndreSubmit","endring","responsFraEndring","registrering","innhold","Ingress","ingress","alert","form","disabled","type","Introduksjon","Registrering","setArbeidshverdagen","onRegistreringSubmit","responsFraRegistrering","lagreknapp","Behovgruppe","overskrift","visningCss","behovgruppe","behovgruppetittel","behovliste","as","ingenbehov","Variant","sistEndretFormat","year","month","day","Visningstype","Advarsel","arbeidssøker","samtykke","advarsel","push","IngenCv","IngenJobbprofil","ManglerSamtykke","liste","melding","Visning","dato","toLocaleDateString","Bokmål","behovkategorier","App","viewType","setKandidat","setArbeidssøker","setSamtykke","hentKandidatFraApi","useCallback","hentOgSettArbeidssøker","hentOgSettSamtykke","window","addEventListener","removeEventListener","kandidatErIkkeRegistrert","RegistrerTilretteleggingsbehov","VisTilretteleggingsbehov","Utvikling","visningstype","setVisningstype","navigerTilVisning","navigerTilRegistrering","wrapperClassName","simulertEkspanderbartPanel","undefined","utvikling","require","document","getElementById","ReactDOM","render","NAVSPA","eksporter"],"mappings":"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","file":"static/js/main.63544937.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"behovkategorier\":\"Visning_behovkategorier__2vMF2\",\"behovgruppe\":\"Visning_behovgruppe__2eoPj\",\"behovgruppetittel\":\"Visning_behovgruppetittel__2wIWl\",\"ingenbehov\":\"Visning_ingenbehov__3Cqi5\",\"behovliste\":\"Visning_behovliste__2llgg\",\"advarsler\":\"Visning_advarsler__36ys3\"};","import { Arbeidshverdagen, Arbeidstid, Fysisk } from '../api/Behov';\nimport { Kandidat } from '../api/Kandidat';\nimport { Arbeidssøker } from '../api/arbeidssøkerApi';\n\nexport const etFnr = '12345678901';\n\nexport const enKandidat: Kandidat = {\n    aktørId: '4943247287476',\n    fnr: etFnr,\n    sistEndretAvVeileder: '2019-09-22T20:38:53.312Z',\n    sistEndretAv: 'J337738',\n    arbeidstid: [Arbeidstid.IkkeHeleDager, Arbeidstid.Fleksibel],\n    fysisk: [Fysisk.Ergonomi, Fysisk.Arbeidsstilling, Fysisk.UniversellUtforming],\n    arbeidshverdagen: [Arbeidshverdagen.PersonligBistand],\n    utfordringerMedNorsk: [],\n};\n\nexport const enArbeidssoker: Arbeidssøker = {\n    harJobbprofil: false,\n    harCv: true,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"kategoriSpørsmål\":\"KategoriSpørsmål_kategoriSpørsmål__1BMbY\",\"tittel\":\"KategoriSpørsmål_tittel__21KXd\",\"kategorihjelpetekst\":\"KategoriSpørsmål_kategorihjelpetekst__3v7hg\",\"hjelpetekst\":\"KategoriSpørsmål_hjelpetekst__2-C39\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slettModal\":\"SlettModal_slettModal__nN8a7\",\"tekst\":\"SlettModal_tekst__23SMF\",\"knapper\":\"SlettModal_knapper__29aGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"advarsel\":\"Advarsel_advarsel__1BdxK\",\"liste\":\"Advarsel_liste__20nFH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"giTilbakemelding\":\"GiTilbakemelding_giTilbakemelding__3MwV7\",\"beskrivelse\":\"GiTilbakemelding_beskrivelse__2CqrI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tekst\":\"Introduksjon_tekst__RVZJ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"utvikling\":\"Utvikling_utvikling__uOJnO\",\"simulertEkspanderbartPanel\":\"Utvikling_simulertEkspanderbartPanel__31rQx\"};","export enum Kategori {\n    Arbeidstid,\n    Fysisk,\n    Arbeidshverdagen,\n    UtfordringerMedNorsk,\n}\n\nexport enum Arbeidstid {\n    IkkeHeleDager = 'IKKE_HELE_DAGER',\n    BorteFasteDagerEllerTider = 'BORTE_FASTE_DAGER_ELLER_TIDER',\n    Fleksibel = 'FLEKSIBEL',\n    GradvisØkning = 'GRADVIS_ØKNING',\n}\n\nexport enum Fysisk {\n    Arbeidsstilling = 'ARBEIDSSTILLING',\n    Ergonomi = 'ERGONOMI',\n    TungeLøft = 'TUNGE_LØFT',\n    UniversellUtforming = 'UNIVERSELL_UTFORMING',\n}\n\nexport enum Arbeidshverdagen {\n    Opplæring = 'OPPLÆRING',\n    Arbeidsoppgaver = 'OPPGAVER',\n    TettOppfølging = 'TETT_OPPFØLGING',\n    StilleOgRoligMiljø = 'STILLE_OG_ROLIG_MILJØ',\n    PersonligBistand = 'PERSONLIG_BISTAND',\n}\n\nexport enum UtfordringerMedNorsk {\n    Snakke = 'SNAKKE',\n    Skrive = 'SKRIVE',\n    Lese = 'LESE',\n}\n\nexport type Behov = Arbeidstid | Fysisk | Arbeidshverdagen | UtfordringerMedNorsk;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tilbakeknapp\":\"Tilbakeknapp_tilbakeknapp__PIbA1\"};","import fetchMock from 'fetch-mock';\nimport { enArbeidssoker, enKandidat } from './testdata';\n\nconst basePath = '/finn-kandidat-api';\n\nfetchMock\n    .get(`express:${basePath}/kandidater/:fnr`, enKandidat)\n    .post(`${basePath}/kandidater`, {\n        status: 201,\n        body: enKandidat,\n    })\n    .put(`${basePath}/kandidater`, {\n        ...enKandidat,\n        sistEndretAvVeileder: new Date().toISOString(),\n    })\n    .delete(`express:${basePath}/kandidater/:fnr`, 200, {\n        delay: 20000,\n    })\n    .get(`express:${basePath}/synlighet/:aktorId`, enArbeidssoker)\n    .post(`${basePath}/tilbakemeldinger`, 201)\n    .get(`express:${basePath}/samtykke/:aktorId`, 200);\n","import { Kandidat } from './Kandidat';\nimport { Arbeidssøker } from './arbeidssøkerApi';\n\nexport type RestKandidat = IkkeLastet | LasterInn | Suksess<Kandidat> | Slettet | Feil | UkjentFeil;\nexport type RestArbeidssøker = IkkeLastet | LasterInn | Suksess<Arbeidssøker> | Feil | UkjentFeil;\n\nexport type Tilbakemeldingstatus =\n    | Status.IkkeLastet\n    | Status.LasterInn\n    | Status.Suksess\n    | Status.Feil\n    | Status.UkjentFeil;\n\nexport type Samtykkestatus =\n    | Status.IkkeLastet\n    | Status.LasterInn\n    | Status.Suksess\n    | Status.Feil\n    | Status.IkkeFunnet\n    | Status.UkjentFeil;\n\nexport enum Status {\n    IkkeLastet,\n    LasterInn,\n    Suksess,\n    Slettet,\n    Feil,\n    IkkeFunnet,\n    UkjentFeil,\n}\n\ninterface IkkeLastet {\n    status: Status.IkkeLastet;\n}\n\ninterface LasterInn {\n    status: Status.LasterInn;\n}\n\ninterface Suksess<T> {\n    status: Status.Suksess;\n    data: T;\n}\n\ninterface SuksessEmpty {\n    status: Status.Suksess;\n}\n\ninterface Slettet {\n    status: Status.Slettet;\n}\n\ninterface Feil {\n    status: Status.Feil;\n    statusKode: number;\n}\n\ninterface UkjentFeil {\n    status: Status.UkjentFeil;\n}\n\nexport const ikkeLastet: IkkeLastet = { status: Status.IkkeLastet };\nexport const lasterInn: LasterInn = { status: Status.LasterInn };\nexport const ukjentFeil: UkjentFeil = { status: Status.UkjentFeil };\n","enum Språk {\n    Bokmål = 'nb-NO',\n}\n\nconst sistEndretFormat = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n};\n\nexport const formaterDato = (dato: Date) => dato.toLocaleDateString(Språk.Bokmål, sistEndretFormat);\n","import { RestKandidat, Status, ukjentFeil, Tilbakemeldingstatus, Samtykkestatus } from './Rest';\nimport { KandidatDto } from './Kandidat';\n\nexport const hentKandidat = async (fnr: string): Promise<RestKandidat> => {\n    try {\n        const respons = await fetch('/finn-kandidat-api/kandidater/' + fnr, medCookies);\n        if (!respons.ok) {\n            return { status: Status.Feil, statusKode: respons.status };\n        }\n\n        const kandidat = await respons.json();\n        return { status: Status.Suksess, data: kandidat };\n    } catch (error) {\n        return ukjentFeil;\n    }\n};\n\nexport const opprettKandidat = async (kandidat: KandidatDto): Promise<RestKandidat> => {\n    try {\n        const respons = await fetch('/finn-kandidat-api/kandidater', options('POST', kandidat));\n        if (!respons.ok) {\n            return { status: Status.Feil, statusKode: respons.status };\n        }\n\n        const opprettetKandidat = await respons.json();\n        return { status: Status.Suksess, data: opprettetKandidat };\n    } catch (error) {\n        return ukjentFeil;\n    }\n};\n\nexport const endreKandidat = async (kandidat: KandidatDto): Promise<RestKandidat> => {\n    try {\n        const respons = await fetch('/finn-kandidat-api/kandidater', options('PUT', kandidat));\n        if (!respons.ok) {\n            return { status: Status.Feil, statusKode: respons.status };\n        }\n\n        const endretKandidat = await respons.json();\n        return { status: Status.Suksess, data: endretKandidat };\n    } catch (error) {\n        return ukjentFeil;\n    }\n};\n\nexport const slettKandidat = async (fnr: string): Promise<RestKandidat> => {\n    try {\n        const respons = await fetch('/finn-kandidat-api/kandidater/' + fnr, {\n            method: 'DELETE',\n            ...medCookies,\n        });\n        if (!respons.ok) {\n            return { status: Status.Feil, statusKode: respons.status };\n        }\n\n        return { status: Status.Slettet };\n    } catch (error) {\n        return ukjentFeil;\n    }\n};\n\nexport const sendTilbakemelding = async (tilbakemelding: string): Promise<Tilbakemeldingstatus> => {\n    try {\n        const respons = await fetch(\n            '/finn-kandidat-api/tilbakemeldinger',\n            options('POST', {\n                tilbakemelding,\n                behov: 'ARBEIDSTID',\n            })\n        );\n\n        if (respons.ok) {\n            return Status.Suksess;\n        }\n\n        return Status.Feil;\n    } catch (error) {\n        return Status.UkjentFeil;\n    }\n};\n\nexport const hentSamtykke = async (aktørId: string): Promise<Samtykkestatus> => {\n    try {\n        const respons = await fetch('/finn-kandidat-api/samtykke/' + aktørId, medCookies);\n        if (respons.status === 404) {\n            return Status.IkkeFunnet;\n        }\n        if (respons.ok) {\n            return Status.Suksess;\n        }\n\n        return Status.Feil;\n    } catch (error) {\n        return Status.UkjentFeil;\n    }\n};\n\nconst options = (method: string, body: any) => ({\n    method,\n    body: JSON.stringify(body),\n    headers: { 'Content-Type': 'application/json' },\n    ...medCookies,\n});\n\nexport const medCookies: RequestInit = { credentials: 'same-origin' };\n","import { RestArbeidssøker, Status } from './Rest';\nimport { medCookies } from './api';\n\nexport interface Arbeidssøker {\n    harCv: boolean;\n    harJobbprofil: boolean;\n}\n\nexport const hentArbeidssøker = async (aktørid: string): Promise<RestArbeidssøker> => {\n    try {\n        const respons = await fetch(`/finn-kandidat-api/synlighet/${aktørid}`, medCookies);\n\n        if (!respons.ok || respons.status === 204) {\n            return {\n                status: Status.Feil,\n                statusKode: respons.status,\n            };\n        }\n\n        return {\n            status: Status.Suksess,\n            data: await respons.json(),\n        };\n    } catch (error) {\n        return {\n            status: Status.UkjentFeil,\n        };\n    }\n};\n","export const visRegistreringEvent = 'veilarbmaofs.visTilretteleggingsbehov';\nexport const visDetaljerEvent = 'veilarbmaofs.visDetaljer';\n\nexport const navigerTilRegistreringsside = () => {\n    dispatchEvent(new Event(visRegistreringEvent));\n};\n\nexport const navigerTilVisningsside = () => {\n    dispatchEvent(new Event(visDetaljerEvent));\n};\n","import {\n    Kategori,\n    Behov,\n    Arbeidshverdagen,\n    UtfordringerMedNorsk,\n    Fysisk,\n    Arbeidstid,\n} from './Behov';\n\nexport type Behovtekst = {\n    behov: Behov;\n    beskrivelse: string;\n    hjelpetekst?: string;\n};\n\nconst tilretteleggingsbehov = {\n    [Kategori.Arbeidstid]: [\n        {\n            behov: Arbeidstid.IkkeHeleDager,\n            beskrivelse: 'Kan jobbe hver ukedag, men ikke hele dager',\n        },\n        {\n            behov: Arbeidstid.BorteFasteDagerEllerTider,\n            beskrivelse: 'Må være borte fra jobben til faste dager eller tider',\n        },\n        {\n            behov: Arbeidstid.GradvisØkning,\n            beskrivelse: 'Ønsker gradvis økning av stillingsprosenten',\n        },\n        { behov: Arbeidstid.Fleksibel, beskrivelse: 'Må ha fleksible arbeidsdager' },\n    ],\n    [Kategori.Fysisk]: [\n        {\n            behov: Fysisk.UniversellUtforming,\n            beskrivelse: 'Universell utforming av arbeidsplassen',\n            hjelpetekst: 'For eksempel rullestolrampe, tale i heis eller teleslynge',\n        },\n        {\n            behov: Fysisk.Ergonomi,\n            beskrivelse: 'Ergonomiske tilpasninger',\n            hjelpetekst: 'For eksempel heve-/senkepult eller spesialstol',\n        },\n        { behov: Fysisk.Arbeidsstilling, beskrivelse: 'Varierte arbeidsstillinger' },\n        { behov: Fysisk.TungeLøft, beskrivelse: 'Unngå tunge løft' },\n    ],\n    [Kategori.Arbeidshverdagen]: [\n        {\n            behov: Arbeidshverdagen.Opplæring,\n            beskrivelse: 'Opplæring',\n            hjelpetekst: 'For eksempel hyppige tilbakemeldinger eller lengre opplæringsperiode',\n        },\n        {\n            behov: Arbeidshverdagen.Arbeidsoppgaver,\n            beskrivelse: 'Arbeidsoppgaver',\n            hjelpetekst: 'For eksempel tydelige oppgaver eller unntak fra noen typer oppgaver',\n        },\n        {\n            behov: Arbeidshverdagen.TettOppfølging,\n            beskrivelse: 'Tett oppfølging',\n            hjelpetekst: 'For eksempel ekstra støtte fra en kollega eller mentor',\n        },\n        { behov: Arbeidshverdagen.StilleOgRoligMiljø, beskrivelse: 'Stille og rolig miljø' },\n        {\n            behov: Arbeidshverdagen.PersonligBistand,\n            beskrivelse: 'Personlig bistand',\n            hjelpetekst: 'For eksempel tolk, assistent eller lese- og sekretærhjelp',\n        },\n    ],\n    [Kategori.UtfordringerMedNorsk]: [\n        { behov: UtfordringerMedNorsk.Snakke, beskrivelse: 'Snakke' },\n        { behov: UtfordringerMedNorsk.Skrive, beskrivelse: 'Skrive' },\n        { behov: UtfordringerMedNorsk.Lese, beskrivelse: 'Lese' },\n    ],\n};\n\nexport const hentTekster = (kategori: Kategori): Behovtekst[] => {\n    return tilretteleggingsbehov[kategori];\n};\n\nexport const hentTeksterForValgteBehov = (kategori: Kategori, behov: Behov[]) => {\n    return (tilretteleggingsbehov[kategori] as Behovtekst[]).filter((b) => behov.includes(b.behov));\n};\n","import React, { FunctionComponent } from 'react';\nimport { BodyLong, Checkbox, CheckboxGroup, Detail, Heading } from '@navikt/ds-react';\nimport { Behov, Kategori } from '../../api/Behov';\nimport { Behovtekst, hentTekster } from '../../api/tilretteleggingsbehov';\nimport css from './KategoriSpørsmål.module.css';\n\ninterface Props {\n    tittel: string;\n    hjelpetekst?: string;\n    beskrivelse: string;\n    valgteBehov: Behov[];\n    onChange: (behov: Behov[]) => void;\n    kategori: Kategori;\n}\n\nconst KategoriSpørsmål: FunctionComponent<Props> = ({\n    tittel,\n    beskrivelse,\n    hjelpetekst,\n    valgteBehov,\n    onChange,\n    kategori,\n}) => {\n    const alternativer = hentTekster(kategori);\n\n    const toggleAlternativ = (behov: Behov) => {\n        onChange(\n            valgteBehov.includes(behov)\n                ? valgteBehov.filter((b) => b !== behov)\n                : [...valgteBehov, behov]\n        );\n    };\n\n    return (\n        <section className={css.kategoriSpørsmål}>\n            <Heading level=\"3\" size=\"medium\" className={css.tittel}>\n                {tittel}\n            </Heading>\n            {hjelpetekst && <BodyLong className={css.kategorihjelpetekst}>{hjelpetekst}</BodyLong>}\n\n            <CheckboxGroup legend={beskrivelse}>\n                {alternativer.map((alternativ: Behovtekst) => (\n                    <div className={css.checkbox} key={alternativ.behov}>\n                        <Checkbox\n                            checked={valgteBehov.includes(alternativ.behov)}\n                            onChange={() => toggleAlternativ(alternativ.behov)}\n                            aria-describedby={alternativ.behov + '_hjelpetekst'}\n                        >\n                            {alternativ.beskrivelse}\n                        </Checkbox>\n                        {alternativ.hjelpetekst && (\n                            <Detail\n                                size=\"small\"\n                                id={alternativ.behov + '_hjelpetekst'}\n                                className={css.hjelpetekst}\n                            >\n                                {alternativ.hjelpetekst}\n                            </Detail>\n                        )}\n                    </div>\n                ))}\n            </CheckboxGroup>\n        </section>\n    );\n};\n\nexport default KategoriSpørsmål;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { RestKandidat, Status, ikkeLastet } from '../../api/Rest';\nimport { slettKandidat } from '../../api/api';\nimport { navigerTilVisningsside } from '../../utils/navigering';\nimport { BodyLong, Button, Heading, Modal } from '@navikt/ds-react';\nimport css from './SlettModal.module.css';\n\ninterface Props {\n    erÅpen: boolean;\n    fnr: string;\n    lukk: () => void;\n}\n\nconst SlettModal: FunctionComponent<Props> = ({ erÅpen, fnr, lukk }) => {\n    const [respons, setRespons] = useState<RestKandidat>(ikkeLastet);\n\n    useEffect(() => {\n        if (respons.status === Status.Slettet) {\n            navigerTilVisningsside();\n            lukk();\n        }\n    }, [respons, lukk]);\n\n    const slettKandidatOgLukk = async () => {\n        setRespons({\n            status: Status.LasterInn,\n        });\n\n        const responsFraSletting: RestKandidat = await slettKandidat(fnr);\n        setRespons(responsFraSletting);\n    };\n\n    return (\n        <Modal closeButton open={erÅpen} onClose={lukk} className={css.slettModal}>\n            <Modal.Content>\n                <Heading level=\"1\" size=\"medium\">\n                    Slett behov for tilrettelegging\n                </Heading>\n                <BodyLong className={css.tekst}>\n                    Er du sikker på at du vil slette tilretteleggingsbehovene til denne kandidaten?\n                </BodyLong>\n                <div className={css.knapper}>\n                    <Button\n                        variant=\"primary\"\n                        onClick={slettKandidatOgLukk}\n                        loading={respons.status === Status.LasterInn}\n                    >\n                        Slett\n                    </Button>\n                    <Button variant=\"secondary\" onClick={lukk}>\n                        Avbryt\n                    </Button>\n                </div>\n            </Modal.Content>\n        </Modal>\n    );\n};\n\nexport default SlettModal;\n","import React, { FunctionComponent } from 'react';\nimport { navigerTilVisningsside } from '../utils/navigering';\nimport { Back } from '@navikt/ds-icons';\nimport css from './Tilbakeknapp.module.css';\n\nconst Tilbakeknapp: FunctionComponent = () => {\n    const className = 'navds-link ' + css.tilbakeknapp;\n\n    return (\n        <button onClick={navigerTilVisningsside} className={className}>\n            <Back fr=\"\" />\n            Tilbake til detaljer\n        </button>\n    );\n};\n\nexport default Tilbakeknapp;\n","import React, { ChangeEvent, FormEvent, FunctionComponent, useState } from 'react';\nimport { Accordion, Alert, BodyShort, Button, Textarea } from '@navikt/ds-react';\nimport { sendTilbakemelding } from '../api/api';\nimport { Status, Tilbakemeldingstatus } from '../api/Rest';\nimport css from './GiTilbakemelding.module.css';\n\nconst GiTilbakemelding: FunctionComponent = () => {\n    const [tilbakemelding, setTilbakemelding] = useState<string>('');\n    const [status, setStatus] = useState<Tilbakemeldingstatus>(Status.IkkeLastet);\n    const [feilmelding, setFeilmelding] = useState<string | null>(null);\n    const [harTrykketSend, setHarTrykketSend] = useState<boolean>(false);\n\n    const onTilbakemeldingChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        const input = event.target.value;\n\n        setTilbakemelding(input);\n\n        if (harTrykketSend) {\n            validerTilbakemelding(input);\n        }\n    };\n\n    const validerTilbakemelding = (tilbakemelding: string): boolean => {\n        if (tilbakemelding.length === 0) {\n            setFeilmelding('Vennligst fyll ut feltet.');\n            return false;\n        } else if (tilbakemelding.length < 3) {\n            setFeilmelding('Forslaget er for kort.');\n            return false;\n        }\n\n        setFeilmelding(null);\n        return true;\n    };\n\n    const validerOgSendForslag = async (event: FormEvent) => {\n        event.preventDefault();\n\n        setHarTrykketSend(true);\n\n        if (validerTilbakemelding(tilbakemelding)) {\n            setStatus(Status.LasterInn);\n            setStatus(await sendTilbakemelding(tilbakemelding));\n        }\n    };\n\n    const visTilbakemeldingsboks = status === Status.IkkeLastet || status === Status.LasterInn;\n\n    return (\n        <Accordion className={css.giTilbakemelding}>\n            <Accordion.Item>\n                <Accordion.Header>Savner du et alternativ?</Accordion.Header>\n                <Accordion.Content>\n                    {visTilbakemeldingsboks && (\n                        <form onSubmit={validerOgSendForslag}>\n                            <BodyShort className={css.beskrivelse}>\n                                Send oss et forslag. Forslaget blir kun brukt til videreutvikling av\n                                verktøyet.\n                            </BodyShort>\n                            <Textarea\n                                label=\"Forslag\"\n                                error={feilmelding}\n                                value={tilbakemelding}\n                                onChange={onTilbakemeldingChange}\n                            />\n                            <Button loading={status === Status.LasterInn}>Send forslag</Button>\n                        </form>\n                    )}\n\n                    {status === Status.Suksess && (\n                        <Alert variant=\"success\">Takk for din tilbakemelding!</Alert>\n                    )}\n\n                    {status === Status.Feil && (\n                        <Alert variant=\"error\">\n                            Det skjedde en feil, vennligst prøv igjen senere.\n                        </Alert>\n                    )}\n                </Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    );\n};\n\nexport default GiTilbakemelding;\n","import React, { FormEvent, FunctionComponent, useEffect, useState } from 'react';\nimport {\n    Arbeidshverdagen,\n    Arbeidstid,\n    Behov,\n    UtfordringerMedNorsk,\n    Fysisk,\n    Kategori,\n} from '../api/Behov';\nimport { ikkeLastet, lasterInn, RestKandidat, Status } from '../api/Rest';\nimport { navigerTilVisningsside } from '../utils/navigering';\nimport KategoriSpørsmål from '../registrering/kategori-spørsmål/KategoriSpørsmål';\nimport { Kandidat, KandidatDto } from '../api/Kandidat';\nimport { endreKandidat } from '../api/api';\nimport SlettModal from './slett-modal/SlettModal';\nimport Tilbakeknapp from '../tilbakeknapp/Tilbakeknapp';\nimport GiTilbakemelding from '../gi-tilbakemelding/GiTilbakemelding';\nimport { Alert, BodyShort, Button, Heading, Ingress } from '@navikt/ds-react';\nimport css from '../registrering/Registrering.module.css';\n\ninterface Props {\n    kandidat: Kandidat;\n}\n\nconst Endring: FunctionComponent<Props> = ({ kandidat }) => {\n    const [arbeidstid, setArbeidstid] = useState<Behov[]>(kandidat.arbeidstid);\n    const [fysisk, setFysisk] = useState<Behov[]>(kandidat.fysisk);\n    const [arbeidshverdagen, setArbeidhverdagen] = useState<Behov[]>(kandidat.arbeidshverdagen);\n    const [utfordringerMedNorsk, setUtfordringerMedNorsk] = useState<Behov[]>(\n        kandidat.utfordringerMedNorsk\n    );\n    const [skalViseIngenValgteBehovFeil, setSkalViseIngenValgteBehovFeil] =\n        useState<boolean>(false);\n\n    const [respons, setRespons] = useState<RestKandidat>(ikkeLastet);\n    const [visSlettModal, toggleSlettModal] = useState<boolean>(false);\n\n    useEffect(() => {\n        setSkalViseIngenValgteBehovFeil(false);\n    }, [arbeidstid, fysisk, arbeidshverdagen, utfordringerMedNorsk]);\n\n    useEffect(() => {\n        if (respons.status === Status.Suksess) {\n            navigerTilVisningsside();\n        }\n    }, [respons]);\n\n    const harIngenValgteBehov = () => {\n        return (\n            arbeidstid.length === 0 &&\n            fysisk.length === 0 &&\n            arbeidshverdagen.length === 0 &&\n            utfordringerMedNorsk.length === 0\n        );\n    };\n\n    const onEndreSubmit = async (event: FormEvent) => {\n        event.preventDefault();\n\n        if (respons.status === Status.LasterInn) return;\n\n        if (harIngenValgteBehov()) {\n            setSkalViseIngenValgteBehovFeil(true);\n            return;\n        }\n\n        const endring: KandidatDto = {\n            fnr: kandidat.fnr,\n            arbeidstid: arbeidstid as Arbeidstid[],\n            fysisk: fysisk as Fysisk[],\n            arbeidshverdagen: arbeidshverdagen as Arbeidshverdagen[],\n            utfordringerMedNorsk: utfordringerMedNorsk as UtfordringerMedNorsk[],\n        };\n\n        setRespons(lasterInn);\n        const responsFraEndring: RestKandidat = await endreKandidat(endring);\n        setRespons(responsFraEndring);\n    };\n\n    return (\n        <div className={css.registrering}>\n            <div className={css.innhold}>\n                <Tilbakeknapp />\n                <Heading size=\"large\" level=\"2\">\n                    Endre behov for tilrettelegging\n                </Heading>\n                <Ingress className={css.ingress}>\n                    Registrer bare brukere som har behov for tilrettelegging for å kunne jobbe. Du\n                    skal ikke registrere brukere som har problemer med å få seg jobb av andre\n                    årsaker (etnisitet, religion, hull i CV-en m.m.).\n                </Ingress>\n                <Alert variant=\"info\" className={css.alert}>\n                    Før du registrerer behovene, må du ha hatt en dialog med brukeren. Brukeren vil\n                    kunne se det du registrerer under Personopplysninger på Ditt NAV.\n                </Alert>\n                <form className={css.form} onSubmit={onEndreSubmit}>\n                    <KategoriSpørsmål\n                        tittel=\"Arbeidstid\"\n                        hjelpetekst=\"I jobbprofilen må brukeren selv registrere informasjon om arbeidstid, slik som deltid/heltid, kun dagtid, turnus og lignende.\"\n                        beskrivelse=\"Behov for tilrettelegging av arbeidstiden\"\n                        valgteBehov={arbeidstid}\n                        onChange={setArbeidstid}\n                        kategori={Kategori.Arbeidstid}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Fysisk tilrettelegging\"\n                        beskrivelse=\"Behov for fysisk tilrettelegging på arbeidsplassen\"\n                        valgteBehov={fysisk}\n                        onChange={setFysisk}\n                        kategori={Kategori.Fysisk}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Arbeidshverdagen\"\n                        beskrivelse=\"Behov for tilpasninger i arbeidshverdagen\"\n                        valgteBehov={arbeidshverdagen}\n                        onChange={setArbeidhverdagen}\n                        kategori={Kategori.Arbeidshverdagen}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Utfordringer med norsk\"\n                        hjelpetekst=\"For eksempel brukere med lese- og skrivevansker, språk- og taleforstyrrelser eller utfordringer med norsk fordi personen kommer fra et annet land.\"\n                        beskrivelse=\"Kandidaten har utfordringer med å:\"\n                        valgteBehov={utfordringerMedNorsk}\n                        onChange={setUtfordringerMedNorsk}\n                        kategori={Kategori.UtfordringerMedNorsk}\n                    />\n                    <div className={css.knapper}>\n                        <Button variant=\"primary\" loading={respons.status === Status.LasterInn}>\n                            Lagre endringer\n                        </Button>\n                        <Button\n                            variant=\"primary\"\n                            disabled={respons.status === Status.LasterInn}\n                            onClick={() => toggleSlettModal(true)}\n                            type=\"button\"\n                        >\n                            Slett\n                        </Button>\n                        <Button variant=\"secondary\" onClick={navigerTilVisningsside}>\n                            Avbryt\n                        </Button>\n                    </div>\n                    {respons.status === Status.Feil ||\n                        (respons.status === Status.UkjentFeil && (\n                            <BodyShort className={css.feilmelding}>\n                                Kunne ikke endre behov for tilrettelegging\n                            </BodyShort>\n                        ))}\n                    {skalViseIngenValgteBehovFeil && (\n                        <BodyShort className={css.feilmelding}>\n                            Du må velge minst ett behov\n                        </BodyShort>\n                    )}\n                </form>\n                <GiTilbakemelding />\n            </div>\n            <SlettModal\n                erÅpen={visSlettModal}\n                fnr={kandidat.fnr}\n                lukk={() => toggleSlettModal(false)}\n            />\n        </div>\n    );\n};\n\nexport default Endring;\n","import React, { FunctionComponent } from 'react';\nimport { BodyLong, Button } from '@navikt/ds-react';\nimport { navigerTilRegistreringsside } from '../utils/navigering';\nimport css from './Introduksjon.module.css';\n\nconst Introduksjon: FunctionComponent = () => (\n    <>\n        <BodyLong className={css.tekst}>\n            Har brukeren behov som gjør at tilrettelegging er nødvendig for å kunne være i jobb?\n            Mulighetene på arbeidsmarkedet kan bli styrket når du registrerer behov for\n            tilrettelegging, fordi behovene kobles sammen med arbeidsgivere som kan tilrettelegge.\n        </BodyLong>\n        <BodyLong className={css.tekst}>\n            Du kan søke fram brukere med behov for tilrettelegging i Rekrutteringsbistand.\n        </BodyLong>\n        <Button size=\"medium\" onClick={navigerTilRegistreringsside}>\n            Registrer\n        </Button>\n    </>\n);\n\nexport default Introduksjon;\n","import React, { FormEvent, FunctionComponent, useEffect, useState } from 'react';\nimport { Alert, BodyShort, Button, Heading, Ingress } from '@navikt/ds-react';\n\nimport {\n    Arbeidshverdagen,\n    Arbeidstid,\n    Behov,\n    Fysisk,\n    UtfordringerMedNorsk,\n    Kategori,\n} from '../api/Behov';\nimport { ikkeLastet, lasterInn, RestKandidat, Status } from '../api/Rest';\nimport { KandidatDto } from '../api/Kandidat';\nimport { navigerTilVisningsside } from '../utils/navigering';\nimport { opprettKandidat } from '../api/api';\nimport GiTilbakemelding from '../gi-tilbakemelding/GiTilbakemelding';\nimport KategoriSpørsmål from './kategori-spørsmål/KategoriSpørsmål';\nimport Tilbakeknapp from '../tilbakeknapp/Tilbakeknapp';\nimport css from './Registrering.module.css';\n\ninterface Props {\n    fnr: string;\n}\n\nconst Registrering: FunctionComponent<Props> = ({ fnr }) => {\n    const [arbeidstid, setArbeidstid] = useState<Behov[]>([]);\n    const [fysisk, setFysisk] = useState<Behov[]>([]);\n    const [arbeidshverdagen, setArbeidshverdagen] = useState<Behov[]>([]);\n    const [utfordringerMedNorsk, setUtfordringerMedNorsk] = useState<Behov[]>([]);\n    const [skalViseIngenValgteBehovFeil, setSkalViseIngenValgteBehovFeil] =\n        useState<boolean>(false);\n\n    const [respons, setRespons] = useState<RestKandidat>(ikkeLastet);\n\n    useEffect(() => {\n        setSkalViseIngenValgteBehovFeil(false);\n    }, [arbeidstid, fysisk, arbeidshverdagen, utfordringerMedNorsk]);\n\n    useEffect(() => {\n        if (respons.status === Status.Suksess) {\n            navigerTilVisningsside();\n        }\n    }, [respons]);\n\n    const harIngenValgteBehov = () => {\n        return (\n            arbeidstid.length === 0 &&\n            fysisk.length === 0 &&\n            arbeidshverdagen.length === 0 &&\n            utfordringerMedNorsk.length === 0\n        );\n    };\n\n    const onRegistreringSubmit = async (event: FormEvent) => {\n        event.preventDefault();\n\n        if (respons.status === Status.LasterInn) return;\n\n        if (harIngenValgteBehov()) {\n            setSkalViseIngenValgteBehovFeil(true);\n            return;\n        }\n\n        const kandidat: KandidatDto = {\n            fnr,\n            arbeidstid: arbeidstid as Arbeidstid[],\n            fysisk: fysisk as Fysisk[],\n            arbeidshverdagen: arbeidshverdagen as Arbeidshverdagen[],\n            utfordringerMedNorsk: utfordringerMedNorsk as UtfordringerMedNorsk[],\n        };\n\n        setRespons(lasterInn);\n        const responsFraRegistrering: RestKandidat = await opprettKandidat(kandidat);\n        setRespons(responsFraRegistrering);\n    };\n\n    return (\n        <div className={css.registrering}>\n            <div className={css.innhold}>\n                <Tilbakeknapp />\n                <Heading size=\"large\" level=\"2\">\n                    Registrer behov for tilrettelegging\n                </Heading>\n                <Ingress className={css.ingress}>\n                    Registrer bare brukere som har behov for tilrettelegging for å kunne jobbe. Du\n                    skal ikke registrere brukere som har problemer med å få seg jobb av andre\n                    årsaker (etnisitet, religion, hull i CV-en m.m.).\n                </Ingress>\n                <Alert variant=\"info\" className={css.alert}>\n                    Før du registrerer behovene, må du ha hatt en dialog med brukeren. Brukeren vil\n                    kunne se det du registrerer under Personopplysninger på Ditt NAV.\n                </Alert>\n                <form className={css.form} onSubmit={onRegistreringSubmit}>\n                    <KategoriSpørsmål\n                        tittel=\"Arbeidstid\"\n                        hjelpetekst=\"I jobbprofilen må brukeren selv registrere informasjon om arbeidstid, slik som deltid/heltid, kun dagtid, turnus og lignende.\"\n                        beskrivelse=\"Behov for tilrettelegging av arbeidstiden\"\n                        valgteBehov={arbeidstid}\n                        onChange={setArbeidstid}\n                        kategori={Kategori.Arbeidstid}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Fysisk tilrettelegging\"\n                        beskrivelse=\"Behov for fysisk tilrettelegging på arbeidsplassen\"\n                        valgteBehov={fysisk}\n                        onChange={setFysisk}\n                        kategori={Kategori.Fysisk}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Arbeidshverdagen\"\n                        beskrivelse=\"Behov for tilpasninger i arbeidshverdagen\"\n                        valgteBehov={arbeidshverdagen}\n                        onChange={setArbeidshverdagen}\n                        kategori={Kategori.Arbeidshverdagen}\n                    />\n                    <KategoriSpørsmål\n                        tittel=\"Utfordringer med norsk\"\n                        hjelpetekst=\"For eksempel brukere med lese- og skrivevansker, språk- og taleforstyrrelser eller utfordringer med norsk fordi personen kommer fra et annet land.\"\n                        beskrivelse=\"Kandidaten har utfordringer med å:\"\n                        valgteBehov={utfordringerMedNorsk}\n                        onChange={setUtfordringerMedNorsk}\n                        kategori={Kategori.UtfordringerMedNorsk}\n                    />\n                    <div className={css.knapper}>\n                        <Button\n                            variant=\"primary\"\n                            loading={respons.status === Status.LasterInn}\n                            className={css.lagreknapp}\n                        >\n                            Lagre behov\n                        </Button>\n                        <Button variant=\"secondary\" onClick={navigerTilVisningsside}>\n                            Avbryt\n                        </Button>\n                    </div>\n                    {respons.status === Status.Feil ||\n                        (respons.status === Status.UkjentFeil && (\n                            <BodyShort className={css.feilmelding}>\n                                Kunne ikke lagre tilretteleggingsbehov\n                            </BodyShort>\n                        ))}\n                    {skalViseIngenValgteBehovFeil && (\n                        <BodyShort className={css.feilmelding}>\n                            Du må velge minst ett behov\n                        </BodyShort>\n                    )}\n                </form>\n                <GiTilbakemelding />\n            </div>\n        </div>\n    );\n};\n\nexport default Registrering;\n","import React, { FunctionComponent } from 'react';\nimport { Behovtekst } from '../api/tilretteleggingsbehov';\nimport { BodyShort, Heading } from '@navikt/ds-react';\nimport visningCss from './Visning.module.css';\n\ninterface Props {\n    overskrift: String;\n    beskrivelse: String;\n    behov: Behovtekst[];\n}\n\nconst Behovgruppe: FunctionComponent<Props> = ({ overskrift, beskrivelse, behov }) => {\n    return (\n        <section className={visningCss.behovgruppe}>\n            <Heading level=\"3\" size=\"small\" className={visningCss.behovgruppetittel}>\n                {overskrift}\n            </Heading>\n            <BodyShort>{beskrivelse}</BodyShort>\n            {behov.length ? (\n                <ul className={visningCss.behovliste}>\n                    {behov.map((behov) => (\n                        <BodyShort as=\"li\" key={behov.beskrivelse}>\n                            {behov.beskrivelse}\n                        </BodyShort>\n                    ))}\n                </ul>\n            ) : (\n                <BodyShort className={visningCss.ingenbehov}>Ingen registrerte behov</BodyShort>\n            )}\n        </section>\n    );\n};\n\nexport default Behovgruppe;\n","import React, { FunctionComponent } from 'react';\nimport { Alert, BodyShort } from '@navikt/ds-react';\nimport { RestArbeidssøker, Samtykkestatus, Status } from '../api/Rest';\nimport css from './Advarsel.module.css';\n\nenum Variant {\n    IngenJobbprofil = 'Kandidaten har ikke jobbprofil',\n    IngenCv = 'Kandidaten har ikke CV',\n    ManglerSamtykke = 'Kandidaten har ikke blitt informert om NAVs behandlingsgrunnlag',\n}\n\ninterface Props {\n    arbeidssøker: RestArbeidssøker;\n    samtykke: Samtykkestatus;\n}\n\nconst Advarsel: FunctionComponent<Props> = ({ arbeidssøker, samtykke }) => {\n    if (\n        arbeidssøker.status === Status.Feil &&\n        arbeidssøker.statusKode === 403 &&\n        samtykke === Status.Suksess\n    ) {\n        return (\n            <Alert variant=\"warning\">Du har ikke tilgang til å se informasjon om brukeren.</Alert>\n        );\n    }\n\n    let advarsel = [];\n\n    if (arbeidssøker.status === Status.Suksess) {\n        if (!arbeidssøker.data.harCv) {\n            advarsel.push(Variant.IngenCv);\n        }\n        if (!arbeidssøker.data.harJobbprofil) {\n            advarsel.push(Variant.IngenJobbprofil);\n        }\n    }\n\n    if (samtykke === Status.IkkeFunnet) {\n        advarsel.push(Variant.ManglerSamtykke);\n    }\n\n    if (advarsel.length === 0) {\n        return null;\n    } else {\n        return (\n            <Alert variant=\"warning\" className={css.advarsel}>\n                <BodyShort>\n                    Brukeren er ikke synlig i kandidatsøket i Rekrutteringsbistand.\n                </BodyShort>\n                <BodyShort>Årsak er:</BodyShort>\n                <ul className={css.liste}>\n                    {advarsel.map((melding) => (\n                        <BodyShort as=\"li\" key={melding}>\n                            {melding}\n                        </BodyShort>\n                    ))}\n                </ul>\n                {advarsel.includes(Variant.ManglerSamtykke) && (\n                    <>\n                        <BodyShort>Be brukeren om å:</BodyShort>\n                        <ol className={css.liste}>\n                            <BodyShort as=\"li\">logge inn på arbeidsplassen.no</BodyShort>\n                            <BodyShort as=\"li\">\n                                lese teksten om at du må dele CV-en med NAV\n                            </BodyShort>\n                            <BodyShort as=\"li\">\n                                gå videre og gjennomføre det tjenesten ber om\n                            </BodyShort>\n                        </ol>\n                    </>\n                )}\n            </Alert>\n        );\n    }\n};\n\nexport default Advarsel;\n","import React, { FunctionComponent, useCallback, useEffect, useState } from 'react';\nimport { Alert } from '@navikt/ds-react';\n\nimport { hentArbeidssøker } from './api/arbeidssøkerApi';\nimport { hentKandidat, hentSamtykke } from './api/api';\nimport {\n    ikkeLastet,\n    lasterInn,\n    RestArbeidssøker,\n    RestKandidat,\n    Samtykkestatus,\n    Status,\n} from './api/Rest';\nimport { visDetaljerEvent } from './utils/navigering';\nimport Endring from './endring/Endring';\nimport Introduksjon from './introduksjon/Introduksjon';\nimport Registrering from './registrering/Registrering';\nimport Visning from './visning/Visning';\n\nexport enum Visningstype {\n    VisTilretteleggingsbehov = 'VIS_TILRETTELEGGINGSBEHOV',\n    RegistrerTilretteleggingsbehov = 'REGISTRER_TILRETTELEGGINGSBEHOV',\n}\n\ninterface Props {\n    viewType: Visningstype;\n    fnr: string;\n}\n\nconst App: FunctionComponent<Props> = ({ viewType, fnr }) => {\n    const [kandidat, setKandidat] = useState<RestKandidat>(ikkeLastet);\n    const [arbeidssøker, setArbeidssøker] = useState<RestArbeidssøker>(ikkeLastet);\n    const [samtykke, setSamtykke] = useState<Samtykkestatus>(Status.IkkeLastet);\n\n    const hentKandidatFraApi = useCallback(async () => {\n        setKandidat(lasterInn);\n        setKandidat(await hentKandidat(fnr));\n    }, [fnr]);\n\n    useEffect(() => {\n        hentKandidatFraApi();\n    }, [hentKandidatFraApi]);\n\n    const hentOgSettArbeidssøker = async (aktørId: string) => {\n        setArbeidssøker(lasterInn);\n        setArbeidssøker(await hentArbeidssøker(aktørId));\n    };\n\n    const hentOgSettSamtykke = async (aktørId: string) => {\n        setSamtykke(Status.LasterInn);\n        setSamtykke(await hentSamtykke(aktørId));\n    };\n\n    useEffect(() => {\n        if (kandidat.status !== Status.Suksess) return;\n\n        hentOgSettArbeidssøker(kandidat.data.aktørId);\n        hentOgSettSamtykke(kandidat.data.aktørId);\n    }, [kandidat]);\n\n    useEffect(() => {\n        window.addEventListener(visDetaljerEvent, hentKandidatFraApi);\n        return () => {\n            window.removeEventListener(visDetaljerEvent, hentKandidatFraApi);\n        };\n    }, [hentKandidatFraApi]);\n\n    const kandidatErIkkeRegistrert =\n        (kandidat.status === Status.Feil && kandidat.statusKode === 404) ||\n        kandidat.status === Status.Slettet;\n\n    if (viewType === Visningstype.RegistrerTilretteleggingsbehov) {\n        if (kandidat.status === Status.Suksess) {\n            return <Endring kandidat={kandidat.data} />;\n        } else if (kandidatErIkkeRegistrert) {\n            return <Registrering fnr={fnr} />;\n        }\n    } else if (viewType === Visningstype.VisTilretteleggingsbehov) {\n        if (kandidat.status === Status.Suksess) {\n            return (\n                <Visning kandidat={kandidat.data} arbeidssøker={arbeidssøker} samtykke={samtykke} />\n            );\n        } else if (kandidatErIkkeRegistrert) {\n            return <Introduksjon />;\n        }\n    }\n\n    if (kandidat.status === Status.Feil) {\n        return <Alert variant=\"error\">Kunne ikke hente tilretteleggingsbehov</Alert>;\n    }\n\n    return null;\n};\n\nexport default App;\n","import React, { FunctionComponent } from 'react';\nimport { BodyShort, Button } from '@navikt/ds-react';\nimport Behovgruppe from './Behovgruppe';\nimport { formaterDato } from '../utils/datoUtils';\nimport { navigerTilRegistreringsside } from '../utils/navigering';\nimport { RestArbeidssøker, Samtykkestatus } from '../api/Rest';\nimport Advarsel from '../advarsel/Advarsel';\nimport { Kandidat } from '../api/Kandidat';\nimport { hentTeksterForValgteBehov } from '../api/tilretteleggingsbehov';\nimport { Kategori } from '../api/Behov';\nimport css from './Visning.module.css';\n\ninterface Props {\n    kandidat: Kandidat;\n    arbeidssøker: RestArbeidssøker;\n    samtykke: Samtykkestatus;\n}\n\nconst Visning: FunctionComponent<Props> = ({ kandidat, arbeidssøker, samtykke }) => {\n    return (\n        <>\n            <BodyShort>\n                Sist endret: {formaterDato(new Date(kandidat.sistEndretAvVeileder))}\n            </BodyShort>\n            <Advarsel arbeidssøker={arbeidssøker} samtykke={samtykke} />\n            <div className={css.behovkategorier}>\n                <Behovgruppe\n                    overskrift=\"Arbeidstid\"\n                    beskrivelse=\"Behov for tilrettelegging av arbeidstiden\"\n                    behov={hentTeksterForValgteBehov(Kategori.Arbeidstid, kandidat.arbeidstid)}\n                />\n                <Behovgruppe\n                    overskrift=\"Fysisk tilrettelegging\"\n                    beskrivelse=\"Behov for fysisk tilrettelegging på arbeidsplassen\"\n                    behov={hentTeksterForValgteBehov(Kategori.Fysisk, kandidat.fysisk)}\n                />\n                <Behovgruppe\n                    overskrift=\"Arbeidshverdagen\"\n                    beskrivelse=\"Behov for tilpasninger i arbeidshverdagen\"\n                    behov={hentTeksterForValgteBehov(\n                        Kategori.Arbeidshverdagen,\n                        kandidat.arbeidshverdagen\n                    )}\n                />\n                <Behovgruppe\n                    overskrift=\"Utfordringer med norsk\"\n                    beskrivelse=\"Kandidaten har utfordringer med å:\"\n                    behov={hentTeksterForValgteBehov(\n                        Kategori.UtfordringerMedNorsk,\n                        kandidat.utfordringerMedNorsk\n                    )}\n                />\n            </div>\n            <Button variant=\"primary\" size=\"medium\" onClick={navigerTilRegistreringsside}>\n                Endre\n            </Button>\n        </>\n    );\n};\n\nexport default Visning;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Heading } from '@navikt/ds-react';\nimport App, { Visningstype } from '../App';\nimport { etFnr } from '../mock/testdata';\nimport { visDetaljerEvent, visRegistreringEvent } from '../utils/navigering';\nimport css from './Utvikling.module.css';\n\nconst Utvikling: FunctionComponent = () => {\n    const [visningstype, setVisningstype] = useState<Visningstype>(\n        Visningstype.VisTilretteleggingsbehov\n    );\n\n    useEffect(() => {\n        const navigerTilVisning = () => {\n            setVisningstype(Visningstype.VisTilretteleggingsbehov);\n        };\n        const navigerTilRegistrering = () => {\n            setVisningstype(Visningstype.RegistrerTilretteleggingsbehov);\n        };\n\n        window.addEventListener(visDetaljerEvent, navigerTilVisning);\n        window.addEventListener(visRegistreringEvent, navigerTilRegistrering);\n        return () => {\n            window.removeEventListener(visDetaljerEvent, navigerTilVisning);\n            window.removeEventListener(visRegistreringEvent, navigerTilRegistrering);\n        };\n    }, []);\n\n    const wrapperClassName =\n        visningstype === Visningstype.VisTilretteleggingsbehov\n            ? css.simulertEkspanderbartPanel\n            : undefined;\n\n    return (\n        <div className={css.utvikling}>\n            <Heading size=\"medium\" level=\"1\">\n                Utviklingsapp for tilretteleggingsbehov\n            </Heading>\n            <div className={wrapperClassName}>\n                <App viewType={visningstype} fnr={etFnr} />\n            </div>\n        </div>\n    );\n};\n\nexport default Utvikling;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport NAVSPA from '@navikt/navspa';\nimport Utvikling from './utvikling/Utvikling';\nimport '@navikt/ds-css';\n\nif (process.env.REACT_APP_MOCK) {\n    require('./mock/mock');\n}\n\nif (document.getElementById('registrer-tilretteleggingsbehov-utvikling')) {\n    ReactDOM.render(\n        <Utvikling />,\n        document.getElementById('registrer-tilretteleggingsbehov-utvikling')\n    );\n} else {\n    NAVSPA.eksporter('tilretteleggingsbehov', App);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrering\":\"Registrering_registrering__2IujU\",\"innhold\":\"Registrering_innhold__67Cwx\",\"alert\":\"Registrering_alert__1dVta\",\"form\":\"Registrering_form__1TKP6\",\"knapper\":\"Registrering_knapper__2geBH\",\"lagreknapp\":\"Registrering_lagreknapp__2b8uo\",\"feilmelding\":\"Registrering_feilmelding__eiehf\",\"ingress\":\"Registrering_ingress__25T9M\"};"],"sourceRoot":""}